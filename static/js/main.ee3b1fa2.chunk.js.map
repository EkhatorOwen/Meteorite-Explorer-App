{"version":3,"sources":["components/header/Header.js","components/search/Search.js","components/table/columns.js","components/table/Resulttable.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Search","_useState","useState","_useState2","Object","slicedToArray","text","setText","value","useContext","ResultContext","input","onChange","e","target","style","width","placeholder","es_button","onClick","handleSearch","backgroundColor","type","columns","title","dataIndex","key","Resulttable","loading","table","rowKey","id","color","pagination","pageSize","dataSource","React","createContext","App","setValue","_useState3","_useState4","originalArray","setOriginalArray","_useState5","_useState6","isLoading","setLoading","useEffect","fetch","then","response","json","data","newArr","sort","b","name","map","elem","obj","nametype","recclass","mass","fall","year","Date","getFullYear","latitude","geolocation","logitude","longitude","push","Provider","val","newVal","toLowerCase","result","filter","includes","header_Header","search_Search","table_Resulttable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee3b1fa2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './header.css'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"app-header\">\r\n      <p>Meteorite Explorer</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React, {useContext, useState}  from 'react';\r\nimport {ResultContext} from '../../App';\r\n\r\n\r\nimport {Input, Button} from 'antd';\r\n\r\nimport './search.css';\r\n\r\nconst Search = () => {\r\n  const [text, setText] = useState('')\r\n  const value = useContext(ResultContext);\r\n\r\n  return (\r\n    <div className=\"search-box\">\r\n      <div className=\"search-box-input\">\r\n        <Input onChange={e=>setText(e.target.value)} style={{width: '85%'}} placeholder=\"Enter search term\" />\r\n        <Button onClick={()=>value.handleSearch(text)}  style={{backgroundColor:\"#3F51B5\"}} type=\"primary\">Search</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","export const columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n  },\r\n  {\r\n    title: 'Id',\r\n    dataIndex: 'id',\r\n    key: 'id',\r\n  },\r\n  {\r\n    title: 'Name Type',\r\n    dataIndex: 'nametype',\r\n    key: 'nametype',\r\n  },\r\n  {\r\n    title: 'Rec Class',\r\n    dataIndex: 'recclass',\r\n    key: 'recclass',\r\n  },\r\n  {\r\n    title: 'Mass(g)',\r\n    dataIndex: 'mass',\r\n    key: 'mass',\r\n  },\r\n  {\r\n    title: 'Fall',\r\n    dataIndex: 'fall',\r\n    key: 'fall',\r\n  },\r\n  {\r\n    title: 'Year',\r\n    dataIndex: 'year',\r\n    key: 'year',\r\n  },\r\n  {\r\n    title: 'Latitude',\r\n    dataIndex: 'latitude',\r\n    key: 'latitude',\r\n  },\r\n  {\r\n    title: 'Logitude',\r\n    dataIndex: 'logitude',\r\n    key: 'logitude',\r\n  }\r\n];\r\n\r\nexport const getData=() =>{\r\n \r\n}","import React, {useContext} from 'react';\r\n\r\nimport {Table} from 'antd';\r\n\r\nimport {columns} from './columns';\r\n\r\nimport {ResultContext} from '../../App';\r\n\r\nimport './table.css';\r\n\r\nconst Resulttable = () => {\r\n  const value = useContext(ResultContext);\r\n\r\n  return (\r\n    <div className=\"result-container\">\r\n      <div className=\"result-table\">\r\n        {value.loading ? (\r\n          <p>loading...</p>\r\n        ) : (\r\n          <Table\r\n            rowKey={(value) => value.id}\r\n            style={{color: 'white'}}\r\n            columns={columns}\r\n            pagination={{pageSize: 10}}\r\n            dataSource={value.value}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Resulttable;\r\n","import React, {useEffect, useState} from 'react';\n\nimport Header from './components/header/Header';\nimport Search from './components/search/Search';\nimport Resulttable from './components/table/Resulttable';\n\nimport './App.css';\n\nexport const ResultContext = React.createContext();\n\nfunction App() {\n  const [value, setValue] = useState([]);\n  const [originalArray, setOriginalArray] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    \n    fetch('https://data.nasa.gov/resource/gh4g-9sfh.json')\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(data) {\n        let newArr = [];\n        data\n          .sort((a, b) => a.name > b.name)\n          .map((elem) => {\n            let obj = {\n              name: elem.name,\n              id: elem.id,\n              nametype: elem.nametype,\n              recclass: elem.recclass,\n              mass: elem.mass,\n              fall: elem.fall,\n              year: new Date(elem.year).getFullYear(),\n              latitude: elem.geolocation ? elem.geolocation.latitude : '',\n              logitude: elem.geolocation ? elem.geolocation.longitude : '',\n            };\n            return newArr.push(obj);\n          });\n        setValue(newArr);\n        setOriginalArray(newArr);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleSearch = (val) => {\n    if (val === '') setValue(originalArray);\n    const newVal = val.toLowerCase()\n\n \n    const result = originalArray.filter((elem) => elem.name.toLowerCase().includes(newVal));\n    setValue(result);\n  };\n\n  return (\n    <ResultContext.Provider value={{value, isLoading, handleSearch}}>\n      <div className=\"content_setting\">\n        <Header />\n        <Search />\n        <Resulttable />\n      </div>\n    </ResultContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}